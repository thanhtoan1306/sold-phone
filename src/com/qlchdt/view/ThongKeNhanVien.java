/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.qlchdt.view;

import com.qlchdt.model.HoaDon;
import com.qlchdt.model.NhanVien;
import com.qlchdt.service.HoaDonService;
import com.qlchdt.service.NhanVienService;
import java.awt.CardLayout;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author ACER
 */
public class ThongKeNhanVien extends javax.swing.JPanel {
    private NhanVienService nhanVienServ;
    private HoaDonService hoaDonServ;
    private float doanhThu;
    private int soLuong;
    private String bestCuli;
    public float getDoanhThu() {
        return doanhThu;
    }

    public int getSoLuong() {
        return soLuong;
    }

    public String summary() {
        String tongKet="";
        tongKet = "Nhân Viên ưu tú nhất: "+this.bestCuli + " với doanh thu là " + this.getDoanhThu() + " (triệu) và số hóa đơn là " + this.soLuong;
        return tongKet;
    }
    
    /**
     * Creates new form ThongKeNhanVien
     */
    public ThongKeNhanVien() {
        nhanVienServ = new NhanVienService();
        hoaDonServ = new HoaDonService();
        initComponents();
        this.setDataToChart();
    }

    DefaultCategoryDataset createDataset() {
        List<NhanVien> list_nv = this.nhanVienServ.getDsnv();
        List<HoaDon> list_hd = this.hoaDonServ.getDshd();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        Map<String, List<HoaDon>> byMaNVHoaDon = list_hd.stream().collect(Collectors.groupingBy(hd
                -> hd.getMaNhanVien()));
        float max=-1;
        
        for (NhanVien nv : list_nv) {
            String key = nv.getMaNV();
            List<HoaDon> hoaDonTheoNV = byMaNVHoaDon.get(key);  // Lay HoaDon theo MaNV
            int soLuongHoaDon = 0;
            float doanhThuThang = 0;    // của từng nhân viên
            
            //JOptionPane.showMessageDialog(null, "mã trong NV: " + key + ", mã trong HoaDon: " + byMaNVHoaDon.get(key));
            if (hoaDonTheoNV!=null) {
                for (HoaDon hd : hoaDonTheoNV) {
                    doanhThuThang += hd.getTongTien();
                    soLuongHoaDon++;
                }
            }
            if (doanhThuThang>max) {
                this.bestCuli = nv.getTenNV();
                this.soLuong = soLuongHoaDon;
                this.doanhThu = doanhThuThang;
                max = doanhThuThang;
            }
            dataset.addValue(doanhThuThang, "Tổng Tiền (triệu)", nv.getTenNV());
            dataset.addValue(soLuongHoaDon, "Số Hoá Đơn Thanh Toán", nv.getTenNV());
        }
        return dataset;
    }
    
    public void setDataToChart() {
        DefaultCategoryDataset dataset = this.createDataset();
        JFreeChart barChart = ChartFactory.createBarChart("Biểu đồ thống kê nhân viên ưu tú".toUpperCase(), "Nhân Viên", "Độ Ưu Tú", dataset);
        
        CategoryItemRenderer renderer = ((CategoryPlot)barChart.getPlot()).getRenderer();
        renderer.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        renderer.setDefaultItemLabelsVisible(true);
        ItemLabelPosition position = new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, 
                TextAnchor.BASELINE_CENTER);
        renderer.setDefaultPositiveItemLabelPosition(position); 
        ChartPanel chartPanel = new ChartPanel(barChart);
        
        //chartPanel.setPreferredSize(new Dimension(800, 600));
        this.setLayout(new CardLayout());
        this.add(chartPanel);
        this.validate();
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
